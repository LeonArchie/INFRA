// vars/buildDockerImage.groovy

/**
 * –°–æ–±–∏—Ä–∞–µ—Ç Docker –æ–±—Ä–∞–∑ –∏–∑ —É–∫–∞–∑–∞–Ω–Ω–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
 * @param config Map —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏:
 *   - imageName (String): –ü–æ–ª–Ω–æ–µ –∏–º—è –æ–±—Ä–∞–∑–∞ (–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–µ)
 *   - contextDir (String): –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è —Å Dockerfile (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é '.')
 * @return void
 * 
 * –ü—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:
 * 1. buildDockerImage(imageName: 'my-image:latest')
 * 2. buildDockerImage(imageName: 'my-image:1.0', contextDir: 'docker')
 */

def call(Map config = [:]) {
    if (!config.imageName) {
        error("Parameter 'imageName' is required")
    }
    
    def contextDir = config.contextDir ?: '.'
    
    echo """
    üõ†Ô∏è Building Docker image:
    - Image: ${config.imageName}
    - Context: ${contextDir}
    """
    
    try {
        def dockerfilePath = "${contextDir}/Dockerfile"
        if (!fileExists(dockerfilePath)) {
            error("Dockerfile not found in ${contextDir}")
        }
        
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º –∞–±—Å–æ–ª—é—Ç–Ω—ã–π –ø—É—Ç—å —Å –∑–∞–º–µ–Ω–æ–π –ø—Ä–æ–±–µ–ª–æ–≤
        def safeWorkspace = env.WORKSPACE.replace(' ', '_')
        def absPath = "${safeWorkspace}/${contextDir}"
        
        sh """
        echo "üìÑ Dockerfile content (first 20 lines):"
        head -20 "${dockerfilePath}"
        echo "Building image from ${contextDir}..."
        docker build -t "${config.imageName}" -f "${dockerfilePath}" .
        """
        
        echo "‚úÖ Image built successfully"
    } catch (Exception e) {
        error("‚ùå Docker build failed: ${e.getMessage()}")
    }
}