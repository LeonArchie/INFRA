// vars/buildDockerImage.groovy

/**
 * –°–æ–±–∏—Ä–∞–µ—Ç Docker –æ–±—Ä–∞–∑ –∏–∑ —É–∫–∞–∑–∞–Ω–Ω–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
 * @param config Map —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏:
 *   - imageName (String): –ü–æ–ª–Ω–æ–µ –∏–º—è –æ–±—Ä–∞–∑–∞ (–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–µ)
 *   - contextDir (String): –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è —Å Dockerfile (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é '.')
 * @return void
 * 
 * –ü—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:
 * 1. buildDockerImage(imageName: 'my-image:latest')
 * 2. buildDockerImage(imageName: 'my-image:1.0', contextDir: 'docker')
 */

def call(Map config = [:]) {
    // –û–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏
    if (!config.imageName) {
        error("Parameter 'imageName' is required")
    }
    
    if (!fileExists('Dockerfile')) {
        error("Dockerfile not found in project root")
    }

    try {
        echo """
        üõ†Ô∏è Building Docker image from root:
        - Image: ${config.imageName}
        - Using root Dockerfile
        """
        
        // –í—ã–≤–æ–¥–∏–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ Dockerfile –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
        sh '''
        echo "=== Dockerfile content ==="
        head -20 Dockerfile
        echo "=== Project structure ==="
        find . -maxdepth 3 -type d
        '''
        
        // –°–±–æ—Ä–∫–∞ –æ–±—Ä–∞–∑–∞
        sh "docker build -t ${config.imageName} ."
        
        echo "‚úÖ Image built successfully"
    } catch (Exception e) {
        error("‚ùå Docker build failed: ${e.getMessage()}")
    }
}