// vars/deployToRegistry.groovy

/**
 * –ü—É–±–ª–∏–∫—É–µ—Ç Docker –æ–±—Ä–∞–∑ –≤ registry
 * @param config Map —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏:
 *   - imageName (String): –ü–æ–ª–Ω–æ–µ –∏–º—è –æ–±—Ä–∞–∑–∞ (–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–µ)
 *   - registryUrl (String): URL registry (–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–µ)
 *   - credentialsId (String): ID credentials (–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–µ)
 * @return void
 * 
 * –ü—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:
 * 1. deployToRegistry(
 *      imageName: 'my-image:latest',
 *      registryUrl: 'ghcr.io',
 *      credentialsId: 'docker-creds'
 *    )
 */
def call(Map config = [:]) {
    // –í–∞–ª–∏–¥–∞—Ü–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
    def requiredParams = ['imageName', 'registryUrl', 'credentialsId']
    def missingParams = requiredParams.findAll { !config[it] }
    if (missingParams) {
        error("Missing required parameters: ${missingParams.join(', ')}")
    }
    
    echo """
    üöÄ Deploying Docker image:
    - Image: ${config.imageName}
    - Registry: ${config.registryUrl}
    """
    
    try {
        // –õ–æ–≥–∏–Ω–∏–º—Å—è –≤ registry
        withCredentials([usernamePassword(
            credentialsId: config.credentialsId,
            usernameVariable: 'REGISTRY_USER',
            passwordVariable: 'REGISTRY_TOKEN'
        )]) {
            sh """
            echo \${REGISTRY_TOKEN} | docker login ${config.registryUrl} \
                -u \${REGISTRY_USER} \
                --password-stdin
            """
        }
        
        // –ü—É–±–ª–∏–∫—É–µ–º –æ–±—Ä–∞–∑
        docker.withRegistry("https://${config.registryUrl}", config.credentialsId) {
            docker.image(config.imageName).push()
        }
        
        echo "‚úÖ Image pushed successfully to ${config.registryUrl}"
    } catch (Exception e) {
        error("‚ùå Failed to deploy image: ${e.getMessage()}")
    }
}