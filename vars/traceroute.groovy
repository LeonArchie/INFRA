// vars/traceroute.groovy

/**
 * –í—ã–ø–æ–ª–Ω—è–µ—Ç traceroute/tracert –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω—ã—Ö —Å–µ—Ä–≤–µ—Ä–æ–≤
 * @param config Map —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏:
 *   - servers (List/String): –°–ø–∏—Å–æ–∫ —Å–µ—Ä–≤–µ—Ä–æ–≤
 *   - maxHops (int): –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä—ã–∂–∫–æ–≤ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 30)
 *   - platform (String): 'Linux' –∏–ª–∏ 'Windows' (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 'Linux')
 * @return void
 * 
 * –ü—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:
 * 1. traceroute(servers: 'google.com', maxHops: 15)
 * 2. traceroute(servers: ['yandex.ru', '8.8.8.8'], platform: 'Windows')
 */
def call(Map config = [:]) {
    // –ü–∞—Ä—Å–∏–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
    def servers = config.servers instanceof String ? 
                 config.servers.split('\n') as List : 
                 config.servers ?: []
    def maxHops = config.maxHops?.toInteger() ?: 30
    def platform = config.platform ?: 'Linux'
    
    servers.each { server ->
        server = server.trim()
        if (!server) return
        
        echo "üåê Tracing route to ${server} (max ${maxHops} hops)"
        
        try {
            if (platform == 'Windows') {
                bat "tracert -h ${maxHops} ${server}"
            } else {
                sh "traceroute -m ${maxHops} ${server}"
            }
        } catch (e) {
            echo "‚ö†Ô∏è Traceroute failed for ${server}: ${e}"
        }
    }
}