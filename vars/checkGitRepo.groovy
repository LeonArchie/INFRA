// vars/checkGitRepo.groovy

/**
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∏ –∫–ª–æ–Ω–∏—Ä—É–µ—Ç Git —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π
 * @param config Map –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤:
 *   - repoUrl (String): URL —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è (–æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–π)
 *   - branch (String): –í–µ—Ç–∫–∞ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 'main')
 *   - credsId (String): ID credentials (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ –¥–ª—è –ø—Ä–∏–≤–∞—Ç–Ω—ã—Ö —Ä–µ–ø–æ)
 * @return void
 * 
 * –ü—Ä–∏–º–µ—Ä—ã:
 * 1. checkGitRepo(repoUrl: 'https://github.com/user/repo.git')
 * 2. checkGitRepo(repoUrl: 'https://github.com/private/repo.git', credsId: 'my-creds')
 */
def call(Map config = [:]) {
    // –ü–æ–ª—É—á–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä —É—Ç–∏–ª–∏—Ç —á–µ—Ä–µ–∑ –≤—ã–∑–æ–≤ –º–µ—Ç–æ–¥–∞ call()
    def utils = utilsREPO()  // –ò–∑–º–µ–Ω–µ–Ω–æ —Å new utilsREPO() –Ω–∞ utilsREPO()
    
    // –í–∞–ª–∏–¥–∞—Ü–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
    utils.validateRepoUrl(config.repoUrl)
    def repoName = utils.extractRepoName(config.repoUrl)
    def isPrivate = utils.isPrivateRepo(config.repoUrl, config.credsId)

    echo "üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π: ${repoName ?: config.repoUrl}"

    try {
        if (isPrivate) {
            echo "üîê –ò—Å–ø–æ–ª—å–∑—É–µ–º credentials (${config.credsId}) –¥–ª—è –ø—Ä–∏–≤–∞—Ç–Ω–æ–≥–æ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è"
            git(
                url: config.repoUrl,
                branch: config.branch ?: 'main',
                credentialsId: config.credsId
            )
        } else {
            echo "üåç –ö–ª–æ–Ω–∏—Ä—É–µ–º –ø—É–±–ª–∏—á–Ω—ã–π —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π"
            git(
                url: config.repoUrl,
                branch: config.branch ?: 'main'
            )
        }

        def files = sh(script: 'ls -la', returnStdout: true).trim()
        echo "üìÇ –°–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è:\n${files}"
        
        return [status: 'SUCCESS', repo: repoName]
    } catch (Exception e) {
        error "‚ùå –û—à–∏–±–∫–∞ –∫–ª–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è: ${e.getMessage()}"
        return [status: 'FAILURE', error: e.getMessage()]
    }
}